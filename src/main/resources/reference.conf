
application {
 
  env = dev

  version = "1.0"

  name="proteus" 
  # tmpdir
  tmpdir = ${java.io.tmpdir}/${application.name}

  # path (a.k.a. as contextPath)
  path = "/v1"

  # localhost
  host = "localhost"

  # HTTP ports
  port = 8090

  # uncomment to enabled HTTPS
  # securePort = 8443

  # we do UTF-8
  charset = UTF-8

  # date format
  dateFormat = dd-MMM-yyyy

  fallbackHandler = "io.sinistral.proteus.server.handlers.ServerFallbackHandler"

  defaultResponseListener = "io.sinistral.proteus.server.handlers.ServerDefaultResponseListener"
   
  redirect_https = ""
  
}

api.version="v1"

globalHeaders 
{
#  Access-Control-Allow-Origin: "*"
#  Access-Control-Allow-Methods: "*"
#  Access-Control-Allow-Headers: "*"
  Server = ${application.name}
}


assets {
  # the base path assets will be server from
  path = "/public"
  # the directory to load the assets from
  dir = "./assets"
  cache {
    # cache timeout for the assets
    time = 500
  }
}



swagger {
  # the path that has an index.html template and theme css files
  resourcePrefix="io/sinistral/proteus/swagger"
  # swagger version
  swagger: "2.0"
  info {
    # swagger info title
    title = ${application.name}
    # swagger info version
    version = ${application.version}
  }
  # swagger-ui theme from ostranme's swagger-ui-themes, the following are built-in [feeling-blue, flattop, material, monokai, muted, newspaper, outline]
  # specifying a different name causes the SwaggerService to search in {swagger.resourcePrefix}/themes for a file named "theme-{swagger.theme}.css"
  theme="default"
  # where the swagger endpoints will be mounted
  basePath= ${application.path}"/swagger"
  #the name of the spec file
  specFilename="swagger.json"
  consumes = ["application/json"]
  produces = ["application/json"]
  # supported schemes
  schemes = ["http"]
}

undertow
{
  server {
    enableHttp2 = true
    alwaysSetDate = true
    alwaysSetKeepAlive = false
    recordRequestStartTime = false 
    maxEntitySize = 100M
    bufferPipelinedData = false
  }

  socket {
    backlog = 10000
  }
  # x AvailableProcessors
  ioThreads = 16
  workerThreads = 200
  bufferSize = 16K
  directBuffers = true
}
 
 